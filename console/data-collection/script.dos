// shareStreamingTable = select * from objs(true) where type=`REALTIME and form=`TABLE and shared=true
// if(!(`dcp_test in shareStreamingTable.name)){
    // share streamTable(1:0,["ts","id","metric","value"],[TIMESTAMP,LONG,STRING,STRING]) as dcp_test
// }
/*
增加连接
参数：args 为标准json，需要包含以下字段：
name: 连接名称     字符串
protocol: 协议类型 字符串
host: 主机地址     字符串
port: 端口         整数
username: 用户名   字符串
password: 密码     字符串
*/


def dcp_addConnect(args){
    connectTable = parseJsonTable(args)
    nowConnect = exec makeKey(name,protocol,host,port) from connectTable
    exits = select * from loadTable("dfs://dataAcquisition","connectInfo") where makeKey(name,protocol,host,port) = nowConnect[0]
    if(exits.size()!=0){
         return '{"status":0}'
    }else{
        maxId = (exec max(id) from loadTable("dfs://dataAcquisition","connectInfo"))[0]
        id = iif(maxId==NULL,0,maxId+1)
        replaceColumn!(connectTable,`host,string(connectTable['host']))
        replaceColumn!(connectTable,`password,string(connectTable['password']))
        update connectTable set id = id
        update connectTable set createTime = now()
        update connectTable set updateTime = now()
        connectTable.reorderColumns!(`id`name`protocol`host`port`username`password`createTime`updateTime)
        loadTable("dfs://dataAcquisition","connectInfo").append!(connectTable)
        return '{"status":1,"id":'+id+'}'  
    }
}

/*
修改连接
参数：args 为标准json，可包含以下字段：
必选参数：
id: 连接ID          整数
可选参数：
name: 连接名称      字符串
protocol: 协议类型  字符串
host: 主机地址      字符串
port: 端口         整数
username: 用户名    字符串
password: 密码      字符串
*/
def dcp_updateConnect(args){
    connectArgs = parseExpr(args).eval()
    tmp = select * from loadTable("dfs://dataAcquisition","connectInfo") where id = connectArgs[`id]
    for(col in connectArgs.keys()){
        if(col !=`id){
            if(col in [`host,`password]){
                tmp[col]=string(connectArgs[col])
            }   
            tmp[col]=connectArgs[col]
        }
    }
    tmp[`updateTime]=now()  
    delete from loadTable("dfs://dataAcquisition","connectInfo") where id = connectArgs[`id]
    loadTable("dfs://dataAcquisition","connectInfo").append!(tmp)
    return '{"status":1}'
}


/*
删除连接,删除连接时会同时清理该连接下的所有订阅及订阅信息
参数：args 为标准json，包含以下字段：
ids: 连接ID  int数组
*/
def dcp_deleteConnect(args){
    connectArgs = parseExpr(args).eval()
    subIds = exec subId from  loadTable("dfs://dataAcquisition","subscribeInfo") where connectId in connectArgs[`ids]
    for(subId in subIds){
        mqtt::unsubscribe(subId)
    }
    delete from loadTable("dfs://dataAcquisition","subscribeInfo") where connectId in connectArgs[`ids]
    delete from loadTable("dfs://dataAcquisition","connectInfo") where id in connectArgs[`ids]
    return '{"status":1}'
}

/*
获取连接列表  
参数：args 为标准json，包含以下字段：
protocol: 连接协议 字符串
*/
def dcp_getConnectList(args){
    protocolType = parseExpr(args).eval()
    tmp = select * from loadTable("dfs://dataAcquisition","connectInfo") where protocol=protocolType['protocol']
    return '{"connections":'+toStdJson(tmp)+',"total":'+tmp.size()+'}'  
}


/*
根据模板参数，自动创建流表
参数：args 为标准json，需要包含以下字段：
templateParams 参数列表
*/
def dcp_createDefaultStreamTable(args){
    subArgs = parseExpr(args).eval()
    templateParams=subArgs['templateParams']    
    paramsInfo = parseJsonTable(templateParams)
    tableName = paramsInfo[0].value
    timeColumn = paramsInfo[1].value
    idColumn = paramsInfo[2].value
    enableTableShareAndPersistence(streamTable(1:0,[timeColumn,idColumn,`metric,`value],[TIMESTAMP,STRING,STRING,DOUBLE]),tableName,,,100000,,,100000)
}


/*
添加订阅信息：
参数：args 为标准json，需要包含以下字段：
name: 订阅名称
topic: 订阅主题
connectId：使用的连接
handlerId：使用的解析模板
recvbufSize：接收缓冲区大小
templateParams: 模板参数    
*/
def dcp_addSubscribe(args){
    subArgs = parseExpr(args).eval()
    connectId = subArgs['connectId']
    connectInfo = select id as connectId from loadTable("dfs://dataAcquisition","connectInfo") where id = connectId 
    maxId = (exec max(id) from loadTable("dfs://dataAcquisition","subscribeInfo"))[0]
    id = iif(maxId==NULL,0,maxId+1)
    update connectInfo set id = id 
    update connectInfo set topic = subArgs['topic']
    update connectInfo set name = subArgs['name']
    update connectInfo set recvbufSize = iif(subArgs['recvbufSize']==NULL,20480,subArgs['recvbufSize'])
    update connectInfo set handlerId = subArgs['handlerId']
    update connectInfo set createTime = now()
    update connectInfo set updateTime = now()
    update connectInfo set subId=" "
    update connectInfo set status=0
    update connectInfo set templateParams=subArgs['templateParams'] 
    connectInfo.reorderColumns!(`id`connectId`topic`name`recvbufSize`handlerId`templateParams`status`subId`createTime`updateTime)
    loadTable("dfs://dataAcquisition","subscribeInfo").append!(connectInfo)
    return '{"status":1,"id":'+id+'}'  
}


/*
修改连接
参数：args 为标准json，需要包含以下字段：
必选参数：
id: 订阅ID                   整数
必选参数：
name：订阅名称               字符串    
topic: 订阅主题              字符串
handlerId：使用的解析模板     整数
templateParams: 模板参数     修改handlerId,必须同时有templateParams参数
recvbufSize: 接收缓冲区大小   整数   
*/
def dcp_updateSubscribe(args){
    subArgs = parseExpr(args).eval()
    subscribeInfo = loadTable("dfs://dataAcquisition","subscribeInfo")
    if(subArgs[`name] is not null){
        update subscribeInfo set name = subArgs[`name] where id=subArgs[`id]
        update subscribeInfo set topic = subArgs[`topic] where id=subArgs[`id]
        update subscribeInfo set recvbufSize = subArgs[`recvbufSize] where id=subArgs[`id]
        update subscribeInfo set handlerId = subArgs[`handlerId] where id=subArgs[`id]
        update subscribeInfo set templateParams = subArgs[`templateParams] where id=subArgs[`id]
    }
    if(subArgs[`subId] is not null){
        update subscribeInfo set subId = subArgs[`subId] where id=subArgs[`id]
        update subscribeInfo set status = subArgs[`status] where id=subArgs[`id]
    }
    update loadTable("dfs://dataAcquisition","subscribeInfo") set updateTime = now() where id=subArgs[`id]
    return '{"status":1}'
}


/*
删除订阅
参数：args 为标准json，需要包含以下字段：
ids: 订阅ID int数组
dropTable:删除订阅时是否删除流表 bool
*/
def dcp_deleteSubscribe(args){
    subArgs = parseExpr(args).eval()
    if(subArgs[`dropTable]){
        templateParams = exec templateParams from loadTable("dfs://dataAcquisition","subscribeInfo") where id in subArgs[`ids]
        for(i in templateParams){//i = templateParams[1]
            t = parseJsonTable(i)
            tbName = t[0].value
            actions = (exec actions from getStreamingStat().pubTables where tableName=tbName)[0]
            if(actions != ""){
                actions = strReplace(actions,"[","")
                actions = strReplace(actions,"]","")
                arr = actions.split(',')
                for(action in arr){
                    unsubscribeTable(tableName=tbName, actionName=action)
                    sleep(10)
                }
            }
            if(existsStreamTable(tbName)){
                dropStreamTable(tbName)
            }
        }
    }
    delete from loadTable("dfs://dataAcquisition","subscribeInfo") where id in subArgs[`ids]
    return '{"status":1}'
}



/*
获取订阅列表
参数：args 为标准json，需要包含以下字段：
connectId: 连接ID   整数
*/
def dcp_getConnectAndSubInfo(args){
    subArgs = parseExpr(args).eval()
    connect = select * from loadTable("dfs://dataAcquisition","connectInfo") where id = subArgs['connectId']
    subscribe = select * from loadTable("dfs://dataAcquisition","subscribeInfo") where connectId = subArgs['connectId']
    return '{"connectInfo":'+toStdJson(connect[0])+',"subscribes":'+toStdJson(subscribe)+',"total":'+subscribe.size()+'}'      
}


/*
开始订阅
参数：args 为标准json，需要包含以下字段：
subId: 订阅ID   
*/
def dcp_startSubscribe(args){
    subArgs = parseExpr(args).eval()
    tmp = select * from loadTable("dfs://dataAcquisition","subscribeInfo")  where id = subArgs[`subId]
    tmp = (exec * from tmp left join loadTable("dfs://dataAcquisition","connectInfo") as t on tmp.connectId=t.id)[0]
    handler = (exec handler from loadTable("dfs://dataAcquisition","ParserTemplate") where id = tmp[`handlerId])[0]
    runScript(handler)
    handlerName = handler.split("\n")
    handlerName  = (handlerName[strpos(handlerName,"def")!=-1].split("(")[0].split("def ")[1])[0]
    subscribeStr = 
    'tmp = select * from loadTable("dfs://dataAcquisition","subscribeInfo")  where id='+ subArgs[`subId]+';
    tmp = (exec * from tmp left join loadTable("dfs://dataAcquisition","connectInfo") as t on tmp.connectId=t.id)[0];
    mqtt::subscribe(tmp["host"],tmp["port"],tmp["topic"],,'+handlerName+'{'
    mqsubArgs = (exec templateParams from  loadTable("dfs://dataAcquisition","subscribeInfo") where id = subArgs[`subId])[0]
    mqsubArgs = parseExpr(mqsubArgs).eval() 
    for(i in (0..(mqsubArgs.size()-1))){    
        if(i < mqsubArgs.size()-1 ){
            subscribeStr += "`"+mqsubArgs[i][`value]+","
        }
        else{
            subscribeStr += "`"+mqsubArgs[i][`value]
        }
    }
    subscribeStr += '},tmp["username"],tmp["password"],tmp["recvbufSize"])'
    runScript(subscribeStr)
    subscriptionId=exec last(subscriptionId) from mqtt::getSubscriberStat() order by createTimestamp
    argsNew='{"id":'+subArgs[`subId]+',"subId":"'+subscriptionId+'","status":1}' 
    dcp_updateSubscribe(argsNew)
}


/*
停止订阅
参数：args 为标准json，需要包含以下字段：
subId: 订阅ID  int数组 
*/
def dcp_stopSubscribe(args){
    subArgs = parseExpr(args).eval()
    subId = exec id,subId from loadTable("dfs://dataAcquisition","subscribeInfo") where id in subArgs[`subId]
    id = subId.id
    subId = subId.subId
    for(i in (0..(subId.size()-1))){  
        mqtt::unsubscribe(subId[i])
        argsNew='{"id":'+id[i]+',"subId":" ","status":0}' 
        dcp_updateSubscribe(argsNew) 
    }
}


/*
检测订阅状态
将已经不存在的订阅关闭
@args connectId:连接ID int整数  

*/
def dcp_subStatusMonitor(args){
    subArgs = parseExpr(args).eval()
    subs =exec id,subId from loadTable("dfs://dataAcquisition","subscribeInfo") where connectId=subArgs[`connectId]
    id = subs[`id]
    subId = subs[`subId]
    nowSub = mqtt::getSubscriberStat().subscriptionId
    for(i in (0..(subId.size()-1))){  
        if((!(subId[i] in nowSub)) and subId[i]!=" "){
            argsNew='{"id":'+id[i]+',"subId":" ","status":0}' 
            dcp_updateSubscribe(argsNew) 
        }
    }
}



/*
添加模板
@args 
name:模板名称 字符串
handler:函数定义 字符串
protocol:模板协议 字符串
comment:模板备注 字符串
templateParams：模板参数 字符串
@return 无
*/
def dcp_addHandler(args){
    handlerArgs = parseExpr(args).eval()
    maxId = (exec max(id) from loadTable("dfs://dataAcquisition","ParserTemplate"))[0]
    id = iif(maxId==NULL,0,maxId+1)
    tmp = table([id] as id, [handlerArgs['name']] as name, [handlerArgs['handler']] as handler, [handlerArgs['protocol']] as `protocol,
    string([handlerArgs['comment']]) as comment,[handlerArgs['templateParams']] as templateParams,[now()] as createTime,[now()] as updateTime)  
    loadTable("dfs://dataAcquisition","ParserTemplate").append!(tmp)
    return '{"status":1,"id":'+id+'}'   //添加成功  
}


/*
修改模板
@args 
必选：
id:模板id 整数
可选：
name:模板名称 字符串
protocol:协议 字符串
code:函数定义 字符串
comment:模板备注 字符串
@return 无
*/
def dcp_updateHandler(args){
    handlerArgs = parseExpr(args).eval()    
    ParserTemplate = loadTable("dfs://dataAcquisition","ParserTemplate")
    update ParserTemplate set name = handlerArgs[`name]
    update ParserTemplate set protocol = handlerArgs[`protocol]
    update ParserTemplate set handler = handlerArgs[`code]
    update ParserTemplate set comment = handlerArgs[`comment]
    update ParserTemplate set updateTime = now()  
    return '{"status":1}'   //更新成功  
}    

/*
删除模板
@args 
id:模板id int数组
*/
def dcp_deleteHandler(args){
    handlerArgs = parseExpr(args).eval()
    delete from loadTable("dfs://dataAcquisition","ParserTemplate") where id in handlerArgs[`id]
    return '{"status":1}'   //删除成功  
}



/*
获取点位解析模板列表
@args "protocol":解析模板协议 字符串(默认为空)
@return 返回一个包含解析模板信息的json，键为items，值为解析模板列表 
*/  
def dcp_getParserTemplateList(args="{}"){
    protocolType=parseExpr(args).eval()['protocol']
    if(protocolType==string(NULL)){
        tmp = select * from loadTable("dfs://dataAcquisition","ParserTemplate")
    }else{
        tmp = select * from loadTable("dfs://dataAcquisition","ParserTemplate") where protocol=protocolType 
    } 
    return '{"items":'+toStdJson(tmp)+',"total":'+tmp.size()+'}'  
}

/*
获取模板参数
@args handlerId:模板ID int整数
@return 返回一个包含模板参数的json，键为returnArgs，值为参数列表   
*/
def dcp_getTemplateArgs(args){
    handlerArgs = parseExpr(args).eval()
    handler = (exec templateParams from loadTable("dfs://dataAcquisition","ParserTemplate") where id = handlerArgs['handlerId'])[0]
    return '{"returnArgs":'+handler+'}'    
}


def dcp_exitsDataAcquisition(){
    if(existsDatabase("dfs://dataAcquisition")){
        return '{"status":1,"message":"初始化已完成"}'
    }else{
        return '{"status":0,"message":"还未初始化库表及函数视图"}'
    }   
}


def dcp_createAllTable(){
    db = database("dfs://dataAcquisition",VALUE,[`1])
    colNames = `id`name`protocol`host`port`username`password`createTime`updateTime
    colTypes = [INT,STRING,STRING,STRING,INT,STRING,STRING,TIMESTAMP,TIMESTAMP]
    createTable(db,table(1:0,colNames,colTypes),`connectInfo)

    colNames = `id`connectId`topic`name`recvbufSize`handlerId`templateParams`status`subId`createTime`updateTime  
    colTypes = [INT,INT,STRING,STRING,INT,INT,STRING,INT,STRING,TIMESTAMP,TIMESTAMP]
    createTable(db,table(1:0,colNames,colTypes),`subscribeInfo)

    colNames = `id`name`handler`protocol`comment`templateParams`createTime`updateTime
    colTypes=[INT,STRING,STRING,STRING,STRING,STRING,TIMESTAMP,TIMESTAMP]
    createTable(db,table(1:0,colNames,colTypes),`ParserTemplate)
}


def dcp_stopAllSub(){
    ids = exec subscriptionId from mqtt::getSubscriberStat()
    for(id in ids){
        mqtt::unsubscribe(id)    
    }
}

def dcp_dropAllFunctionView(){
    dropFunctionView(`dcp_createDefaultStreamTable)
    dropFunctionView(`dcp_addConnect)
    dropFunctionView(`dcp_updateConnect)
    dropFunctionView(`dcp_deleteConnect)
    dropFunctionView(`dcp_addSubscribe)
    dropFunctionView(`dcp_updateSubscribe)
    dropFunctionView(`dcp_deleteSubscribe)
    dropFunctionView(`dcp_startSubscribe)
    dropFunctionView(`dcp_stopSubscribe) 
    dropFunctionView(`dcp_getConnectList) 
    dropFunctionView(`dcp_getConnectAndSubInfo) 
    dropFunctionView(`dcp_getParserTemplateList)
    dropFunctionView(`dcp_getTemplateArgs) 
    dropFunctionView(`dcp_subStatusMonitor)
    dropFunctionView(`dcp_addHandler)
    dropFunctionView(`dcp_updateHandler)
    dropFunctionView(`dcp_deleteHandler)
}

def dcp_clearEnv(){
    dcp_stopAllSub()
    dcp_dropAllFunctionView()
    dropDatabase("dfs://dataAcquisition")
}



def dcp_init(){
    dcp_createAllTable()
    addFunctionView(dcp_createDefaultStreamTable)
    addFunctionView(dcp_addConnect)
    addFunctionView(dcp_updateConnect)
    addFunctionView(dcp_deleteConnect)
    addFunctionView(dcp_addSubscribe)
    addFunctionView(dcp_updateSubscribe)
    addFunctionView(dcp_deleteSubscribe)
    addFunctionView(dcp_startSubscribe)
    addFunctionView(dcp_stopSubscribe)
    addFunctionView(dcp_getConnectList)
    addFunctionView(dcp_getConnectAndSubInfo)
    addFunctionView(dcp_getParserTemplateList)
    addFunctionView(dcp_getTemplateArgs)
    addFunctionView(dcp_subStatusMonitor)
    addFunctionView(dcp_addHandler)
    addFunctionView(dcp_updateHandler)
    addFunctionView(dcp_deleteHandler)

    //初始化解析模板
    handler = '
    def msgHandler(outputTableName,timeColumn,idColumn,topic,message){
        tempdict = parseExpr(message).eval()
        keys = tempdict.keys()
        if(timeColumn==NULL){
            ts = now()
        }else{
            ts = temporalParse(tempdict[timeColumn],"yyyy-MM-dd HH:mm:ss")
        }
        id = tempdict[idColumn] 
        for(i in keys){
            if(!(i in [timeColumn,idColumn] )){
                tmp = table([ts] as ts,[id] as id,[i] as metric,[tempdict[i]] as value)
                objByName(outputTableName).append!(tmp)            
            }
        }
    }
    '
    loadTable("dfs://dataAcquisition","ParserTemplate").append!(table([0] as id,["test"] as name,[handler] as handler,[`mqtt] as protocol,
    ["测试解析模板"] as comment,'["outputTableName","timeColumn","idColumn"]' as templateParams,[now()] as c1,[now()] as col2))
}
