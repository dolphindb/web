def loadPluginIfNotLoaded(pluginName) {
    if (in(pluginName, getLoadedPlugins()["plugin"])) {
        return
    }
    
    loadPlugin(pluginName)
}

def loadPlugins(pluginName, nodeAliases=[]) {
    nodeAliases_ = nodeAliases
    if (nodeAliases.form() == 0) {
        nodeAliases_ = [nodeAliases]
    }
    if (nodeAliases.size() == 0) {
        nodeAliases_ = exec name from rpc(getControllerAlias(), getClusterPerf{true}) where mode != 1
    }
    
    pnodeRun(loadPluginIfNotLoaded{pluginName}, nodeAliases_)
}

def getInstalledPluginsOfCluster() {
    getInstalledPluginsInner = def() {
        pluginDir = getPluginDir()
        pluginNames = exec filename from files(pluginDir) where isDir = true
        
        ret = table(1:0, `plugin`version, [STRING, STRING])
        for (pluginName in pluginNames) {
            // pluginName = pluginNames[0]
            dir = pluginDir + "/" + pluginName
            pattern = "Plugin" + upper(pluginName[0]) + pluginName[1:] + ".txt"
            txtName = exec first(filename) from files(dir, "%.txt") where filename ilike pattern
            if (txtName.strlen() == 0) {
                continue
            }
            f = file(dir + "/" + txtName)
            line = readLine(f)
            s = line.split(",")
            if (s.size() < 3) {
                continue
            }
            
            pluginName = s.first()
            pluginVersion = s.last()
            tableInsert(ret, (pluginName, pluginVersion))
        }
        
        return ret
    }
    
    nodes = exec name from rpc(getControllerAlias(), getClusterPerf{true}) where mode != 1
    info = pnodeRun(getInstalledPluginsInner, nodes)
    
    return info
}

def getLoadedPluginsOfCluster() {
    nodes = exec name from rpc(getControllerAlias(), getClusterPerf{true}) where mode != 1
    ret = pnodeRun(getLoadedPlugins, nodes)
    return ret
}

def getPreloadPluginsOfCluster() {
    ret = table(1:0, `node`plugin, [STRING, STRING])
    
    // 数据节点和计算节点
    clusterConfigs = rpc(getControllerAlias(), loadClusterNodesConfigs)
    nodes = exec name from rpc(getControllerAlias(), getClusterPerf) where state == 1 and mode != 1
    excludeNodes = []$STRING

    // <nodeAlias>.preloadModules 配置项优先生效
    for (config in clusterConfigs) {
        if (like(config, "%.preloadModules%")) {
            node = config.split(".").first()
            excludeNodes.append!(node)
            s = config.split("=").last().split(",")
            for (item in s) {
                if (item.startsWith("plugins")) {
                    pluginName = item.split("::").at(1)
                    insert into ret values (node, pluginName)
                }
            }
        }
    }

    // 未配置 <nodeAlias>.preloadModules 的节点，使用 preloadModules 配置项
    otherNodes = nodes[!in(nodes, excludeNodes)]
    for (config in clusterConfigs) {
        // config = clusterConfigs.last()
        if (config.startsWith("preloadModules")) {
            s = config.split("=").last().split(",")
            for (item in s) {
                if (item.startsWith("plugins")) {
                    pluginName = item.split("::").at(1)
                    ret.append!(table(otherNodes as node, take(pluginName, otherNodes.size()) as preloadPlugins))
                }
            }
            break // 重复配置项只有第一条生效
        }
    }
    
    // 控制节点只有 preloadModules 配置项，没有 <nodeAlias>.preloadModules
    cnt = exec count(*) from rpc(getControllerAlias(), getClusterPerf) where mode == 3
    if (cnt == 0) { // 控制节点
        controllerConfigs = rpc(getControllerAlias(), loadControllerConfigs)
        nodes = exec name from rpc(getControllerAlias(), getClusterPerf{true}) where state == 1 and mode == 2
        for (config in controllerConfigs) {
            if (config.startsWith("preloadModules")) {
                s = config.split("=").last().split(",")
                for (item in s) {
                    if (item.startsWith("plugins")) {
                        pluginName = item.split("::").at(1)
                        ret.append!(table(nodes as node, take(pluginName, nodes.size()) as preloadPlugins))
                    }
                }
                break // 重复配置项只有第一条生效
            }
        }  
    }
    
    ret = select * from ret where isDuplicated([node,plugin],FIRST)=false
    
    return ret
}

def listPluginsByNodes() {
    ret = table(1:0, `plugin`node, [STRING, STRING])
    nodes = select name from rpc(getControllerAlias(), getClusterPerf{true}) where mode != 1 order by name asc
    installedPlugins = getInstalledPluginsOfCluster()
    plugins = exec distinct(plugin) from installedPlugins
    for (plugin in plugins) {
        ret.append!(table(take(plugin, nodes.size()) as plugin, nodes as node))
    }
    loadedPlugins = getLoadedPluginsOfCluster()
    preloadPlugins = getPreloadPluginsOfCluster()
    ret = select a.*, !isNull(b.plugin) as isInstalled, b.version as installedVersion from ret a left join installedPlugins b on a.plugin == b.plugin and a.node == b.node
    ret = select a.*, !isNull(b.plugin) as isLoaded, b.version as loadedVersion from ret a left join loadedPlugins b on a.plugin == b.plugin and a.node == b.node
    ret = select a.*, !isNull(b.plugin) as isPreloaded from ret a left join preloadPlugins b on a.plugin == b.plugin and a.node == b.node

    return ret
}

def listPlugins() {
    res = listPluginsByNodes()
    ret = select min(installedVersion) as minInstalledVersion, max(installedVersion) as maxInstalledVersion from res group by plugin
    nodeCnt = exec count(*) from rpc(getControllerAlias(), getClusterPerf{true}) where mode != 1

    addColumn(ret, `installedNodes`toInstallNodes`loadedNodes`preloadedNodes, [STRING, STRING, STRING, STRING])
    for (plugin_ in ret["plugin"]) {
        nodes = exec distinct(node) as node from res where plugin == plugin_ and isInstalled == true order by node asc
        update ret set installedNodes = concat(nodes, ",") where plugin == plugin_
        nodes = exec distinct(node) as node from res where plugin == plugin_ and isInstalled == false order by node asc
        update ret set toInstallNodes = concat(nodes, ",") where plugin == plugin_
        nodes = exec distinct(node) as node from res where plugin == plugin_ and isLoaded == true order by node asc
        update ret set loadedNodes = concat(nodes, ",") where plugin == plugin_
        nodes = exec distinct(node) as node from res where plugin == plugin_ and isPreloaded == true order by node asc
        update ret set preloadedNodes = concat(nodes, ",") where plugin == plugin_
    }

    return ret
}

def getClusterPluginDirs(destNodeAliases=[]) {
    nodes = select * from rpc(getControllerAlias(), getClusterPerf{true}) where mode != 1
    if (destNodeAliases.size() > 0) {
        nodes = select * from nodes where name in destNodeAliases
    }
    addColumn(nodes, "pluginDir", STRING)
    for (node in nodes) {
        name_ = node["name"]
        pluginDir_ = rpc(name_, getPluginDir)
        update nodes set pluginDir = pluginDir_ where name = name_
    }
    // 若host和pluginDir相同，则只需要部署一次
    nodes = select first(name) as name, first(agentSite) as agentSite from nodes group by host, pluginDir
    return nodes
}

def checkPluginZipName(zipName) {
    // zipName = "arrow-Linux-X86-3.00.1-3.00.1.zip"
    pattern = "^([^-]+)-[^-]+-[^-]+-[^-]+-[^-]+\.zip$"
    res = regexFind(zipName, pattern)
    
    if (res != 0) {
        throw "invalid plugin name: " + zipName + ", please use the official format"
    }
    
    return true
}

def installPluginOffline(zipName, zipBytes, destNodeAliases=[]) {
    // destNodeAliases = ["P1_node1"]
    if (defs("zip::unzip").size() == 0) {
        try {
            pnodeRun(loadPluginIfNotLoaded{"zip"}, destNodeAliases)
        } catch(err) {
            err_ = iif(err.form() == 0, string(err), string(err).last())
            throw "try to load zip plugin failed: " + err_
        }
    }

    checkPluginZipName(zipName)
    if (destNodeAliases.size() == 0) {
        throw "destNodeAliases must not be empty"
    }
    nodeAliases = exec name from rpc(getControllerAlias(), getClusterPerf{true}) where mode != 1
    for (destNodeAlias in destNodeAliases) {
        if (!in(destNodeAlias, nodeAliases)) {
            throw "Invalid node alias: " + destNodeAlias
        }
    }
    
    installPluginOfflineInner = def(zipName, zipBytes) {
        pluginDir = getPluginDir()
        
        tmpZipPath = pluginDir + "/tmp.zip"
        f = file(tmpZipPath, "w")
        f.writeObject(zipBytes)
        f.close()
        pluginName = zipName.split("-").first() 
        pluginDir_ = pluginDir + "/" + pluginName
        // 需要先删除目标插件文件夹，详见 WEB-1042
        if (exists(pluginDir_)) {
            rmdir(pluginDir_, true)
        }
        funcByName("zip::unzip")(tmpZipPath)
        rm(tmpZipPath)
    }
    
    nodes = getClusterPluginDirs(destNodeAliases)
    for (node in nodes) {
        // node = nodes[0]
        name = node["name"]
        // 直连节点安装。因为 rpc 不支持连接 agent，而 xdb 需要显式提供密码登录，故无法直连 agent 安装插件。
        rpc(name, installPluginOfflineInner, zipName, zipBytes)
    }
}

def installPluginOnline(pluginName, pluginVersion=NULL, pluginServerAddr=NULL, destNodeAliases=[]) {
    if (destNodeAliases.size() == 0) {
        throw "destNodeAliases must not be empty"
    }
    nodes = getClusterPluginDirs(destNodeAliases)
    pnodeRun(installPlugin{pluginName, pluginVersion, pluginServerAddr}, nodes["name"])
}

def copyFolderToRemoteNode(src, destNodeAlias, dest) {
    // src = "/hdd/hdd8/btxie/ddb_deploy/server/plugins/kafka"
    // destNodeAlias = "P3-dnode1"
    // dest = "/hdd/hdd8/btxie/ddb_deploy/server/plugins/kafka"
    writeBytesRemote = def(filePath, bytes) {
        f = file(filePath, "w")
        f.writeBytes(bytes)
    }
    
    print(getNodeAlias() + ": " + src+"\n -> \n" + destNodeAlias + ": " + dest);
    if (getNodeAlias()==destNodeAlias)
        return
    if (rpc(destNodeAlias, exists, dest)==false)
        rpc(destNodeAlias, mkdir, dest)
    for(oneFile in files(src)) {
        // oneFile = files(src)[0]
        if(oneFile.isDir){
            copyFolderToRemoteNode(src+"/"+oneFile.filename, destNodeAlias, dest+"/"+oneFile.filename);
            continue;
        }
        
        print(oneFile.filename);
        srcFile=file(src+"/"+oneFile.filename);
        len = srcFile.seek(0,TAIL)
        srcFile.seek(0,HEAD)
        if (len==0) {
            continue
        }
        buf = srcFile.readBytes(len)
        rpc(destNodeAlias, writeBytesRemote, dest+"/"+oneFile.filename, buf)
    }
}

def syncPlugin(pluginName, srcNodeAlias, destNodeAliases=[]) {
    if (destNodeAliases.size() == 0) {
        throw "destNodeAliases must not be empty"
    }
    nodeAliases = exec name from rpc(getControllerAlias(), getClusterPerf{true}) where mode != 1
    for (destNodeAlias in destNodeAliases) {
        if (!in(destNodeAlias, nodeAliases)) {
            throw "Invalid node alias: " + destNodeAlias
        }
    }

    syncPluginInner = def(pluginName, destNodeAliases) {
        pluginDir_ = getPluginDir()
        pluginName_ = exec first(filename) from files(pluginDir_) where isDir == true and filename = pluginName
        destInfo = select * from getClusterPluginDirs(destNodeAliases) where host != getNodeHost() or pluginDir != pluginDir_ // 排除本机的相同目录 
        for (item in destInfo) {
            // item = destInfo[0]
            srcDir = pluginDir_ + "/" + pluginName_
            destNodeAlias = item["name"]
            destDir = item["pluginDir"] + "/" + pluginName_
            // 需要先删除目标插件文件夹，详见 WEB-1042
            rmDirIfExists = def(dir) {
                if (exists(dir)) {
                    rmdir(dir, true)
                }
            }

            // 直连节点安装。因为 rpc 不支持连接 agent，而 xdb 需要显式提供密码登录，故无法直连 agent 安装插件。
            rpc(destNodeAlias, rmDirIfExists, destDir)
            copyFolderToRemoteNode(srcDir, destNodeAlias, destDir)
        }
    }
    
    rpc(srcNodeAlias, syncPluginInner, pluginName, destNodeAliases)
}

def getInstallableNodes() {
    return exec name from rpc(getControllerAlias(), getClusterPerf{true}) where mode != 1
}
